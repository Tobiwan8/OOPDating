@page "/login"
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject IJSRuntime js
@inject IAccountService accountService

<PageTitle>Login - OOP</PageTitle>

<h3>Login</h3>
<br />
<input @bind="model.AccountName" class="form-control" placeholder="Account Name" />
<br />
<input @bind="model.Password" type="password" id="Password" class="form-control" placeholder="Password" />
<br />
<button @onclick="Authenticate" class="btn btn-primary">Login</button>
@*<button type="submit" class="btn btn-primary">Create</button>*@

@code {
    private class Model
    {
        public string? AccountName { get; set; }
        public string? Password { get; set; }
    }

    Model model = new();

    private async Task Authenticate()
    {
        if(string.IsNullOrWhiteSpace(model.AccountName) || string.IsNullOrWhiteSpace(model.Password))
        {
            await js.InvokeVoidAsync("alert", "Please enter Account Name and Password");
            return;
        }

        var userAccount = accountService.GetAccount(model.AccountName);

        if(userAccount == null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid Account Name or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.AccountName
            });

        navManager.NavigateTo("/", true);
    }
}
