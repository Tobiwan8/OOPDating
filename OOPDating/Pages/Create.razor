@page "/create"
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject IJSRuntime js
@inject IAccountService accountService
@inject IProfileService profileService
@inject IZipcodeService zipcodeService

<PageTitle>Create</PageTitle>

<h3>Create</h3>
<br />
    <input @bind="account.AccountName" class="form-control" placeholder="Account Name" />
    <br />
    <input @bind="account.Password" type="password" class="form-control" placeholder="Password" />
    <br />
    <button @onclick="Authenticate" class="btn btn-primary">Create</button>
    <br />

@if(AccountNameIsValid)
{
    <br />
    <p>To finalize your account, you will need a profile - Please enter your information</p><br />
    <input @bind="profile.FirstName" class="form-control" placeholder="First Name"/>
    <br />
    <input @bind="profile.LastName" class="form-control" placeholder="Last Name" />
    <br />
    <input @bind="profile.DoB" type="date" class="form-control" />
    <br />
    <label>Male:</label>
    <input name="gender" type="radio" value="Male" checked="@(profile.Gender == "Male")" @onclick="@(()=>profile.Gender = "Male")"/>
    <label>Female:</label>
    <input name="gender" type="radio" value="Female" checked="@(profile.Gender == "Female")" @onclick="@(()=>profile.Gender = "Female")" />
    <br />
    <label>Zipcode:</label>
    <select @bind="profile.ZipcodeID" class="form-control">
        @foreach(var item in zipcodes)
        {
            <option value="@item.Zipcode">@item.Zipcode</option>
        }
    </select>
    <br />
    <button @onclick="Complete" class="btn btn-primary">Complete</button>
}

@code {
    public bool AccountNameIsValid;

    private Account account = new();
    private UserProfile profile = new();
    private List<ZipcodeCity> zipcodes = new();

    private List<ZipcodeCity> GetZipcodesForDropdown()
    {
        zipcodes = zipcodeService.GetZipcodeCities();

        return zipcodes;
    }

    private async Task Authenticate()
    {
        if (string.IsNullOrWhiteSpace(account.AccountName) || string.IsNullOrWhiteSpace(account.Password))
        {
            await js.InvokeVoidAsync("alert", "Please enter Accountname and Password");
            return;
        }

        var newAccount = accountService.GetAccount(account.AccountName);

        if (newAccount.ID != 0)
        {
            await js.InvokeVoidAsync("alert", "Accountname already in use");
            return;
        }

        AccountNameIsValid = true;
        GetZipcodesForDropdown();
        StateHasChanged();
    }

    private async Task Complete()
    {
        if (string.IsNullOrWhiteSpace(profile.FirstName) || string.IsNullOrWhiteSpace(profile.LastName) || string.IsNullOrWhiteSpace(profile.DoB.ToString()) || string.IsNullOrWhiteSpace(profile.Gender) || string.IsNullOrWhiteSpace(profile.ZipcodeID))
        {
            await js.InvokeVoidAsync("alert", "Please provide firstname, lastname, date of birth, gender and zipcode");
            return;
        }

        if(DateTime.Now.Year - profile.DoB.Year < 18 || DateTime.Now.Year - profile.DoB.Year > 100)
        {
            await js.InvokeVoidAsync("alert", "Wow, wow, wow - You are either too young or too old for this");
            return;
        }

        accountService.AddAccount(account);
        account = accountService.GetAccount(account.AccountName);
        profileService.AddProfile(profile, account);

        await js.InvokeVoidAsync("alert", "Well done. Please log in to start hunting");

        navManager.NavigateTo($"/login", true);
    }
}
