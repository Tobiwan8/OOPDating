@page "/Pending"
@inject IJSRuntime js
@inject IProfileService profileService
@inject IZipcodeService zipcodeService
@attribute [Authorize]

<style>
    .profile-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    .profile-card {
        width: calc(20% - 20px);
        margin: 10px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 15px;
        display: inline-block;
        vertical-align: top;
        color: white;
    }

    .female {
        background-color: #E47474;
    }

    .male {
        background-color: #03A7F1;
    }
</style>

<div class="profile-container">
    @foreach (var profile in userProfiles)
    {
        <div class="profile-card" style="@(profile.Gender == "Female" ? "background-color: red;" : "background-color: blue;")">
            <p>@profile.FirstName @profile.LastName<br /></p>
            <p>Age: @CalculateAge(profile.DoB)<br /></p>
            <p>Region: @GetRegion(profile.ZipcodeID)<br /></p>
            <p>Gender: @profile.Gender<br /></p>
            <button @onclick="@(() => HasBeenLiked(profile))" class="btn btn-primary" style="background-color: lightpink">
                <span class="oi oi-heart" aria-hidden="true"></span>
            </button>
            <button @onclick="@(() => DeclineLike(profile))" class="btn btn-primary" style="background-color: red">
                <span class="oi oi-delete" aria-hidden="true"></span>
            </button>
        </div>
    }
</div>

<h3>PendingMatches</h3>

@code {
    private List<UserProfile> userProfiles = new();
    private Account currentAccountID = new();
    private List<ZipcodeCity> zipcodes = new();

    protected override void OnInitialized()
    {
        currentAccountID.ID = CurrentLoginAccount.ID;
        userProfiles = profileService.GetProfilesThatLikeYou(profileService.GetProfileByAccountID(currentAccountID));
        zipcodes = zipcodeService.GetZipcodeCities();
    }

    private string GetRegion(string? zipcode)
    {
        if (zipcode != null)
        {
            ZipcodeCity city = zipcodeService.GetZipcodeCity(zipcode);
            if (city.City != null)
            {
                return city.City;
            }
        }
        return string.Empty;
    }

    private string CalculateAge(DateTime dateOfBirth)
    {
        DateTime currentDate = DateTime.Now;
        int age = currentDate.Year - dateOfBirth.Year;

        if (currentDate.Month < dateOfBirth.Month || (currentDate.Month == dateOfBirth.Month && currentDate.Day < dateOfBirth.Day))
        {
            age--;
        }

        return age.ToString();
    }

    private void HasBeenLiked(UserProfile likedProfile)
    {
        profileService.LikeOrMatchProfile(profileService.GetProfileByAccountID(currentAccountID), likedProfile);
        js.InvokeVoidAsync("alert", "Boy o' boy. Head over to chat, and let the fun BEGIN");
    }

    private void DeclineLike(UserProfile unlikedProfile)
    {
        
    }
}
