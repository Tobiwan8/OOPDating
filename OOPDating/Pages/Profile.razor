@page "/profile"
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject IAccountService accountService
@inject IProfileService profileService
@inject IZipcodeService zipcodeService
@inject IJSRuntime js
@attribute [Authorize]

<h3>Profile</h3>
<br />
<input @bind="profile.FirstName" class="form-control"/>
<br />
<input @bind="profile.LastName" class="form-control" />
<br />
<input @bind="profile.DoB" type="date" class="form-control" />
<br />
<label>Male:</label>
<input name="gender" type="radio" value="Male" checked="@(profile.Gender == "Male")" @onclick="@(()=>profile.Gender = "Male")" />
<label>Female:</label>
<input name="gender" type="radio" value="Female" checked="@(profile.Gender == "Female")" @onclick="@(()=>profile.Gender = "Female")" />
<br />
<textarea @bind="profile.ProfileText" class="form-control"></textarea>
<br />
<label>Zipcode:</label>
<select @bind="profile.ZipcodeID" class="form-control">
    @foreach (var item in zipcodes)
    {
        <option value="@item.Zipcode">@item.Zipcode</option>
    }
</select>
<br />
<button @onclick="Edit" class="btn btn-primary">Edit</button>
<br />
<br />
<button @onclick="DeleteAccount" class="btn btn-primary">Delete</button>

@code {
    private Account account = new();
    public UserProfile profile = new();
    private List<ZipcodeCity> zipcodes = new();

    protected override void OnInitialized()
    {
        account.ID = CurrentLoginAccount.ID;
        account.AccountName = CurrentLoginAccount.AccountName;
        account.Password = CurrentLoginAccount.Password;

        profile = profileService.GetProfileByAccountID(account);
        zipcodes = zipcodeService.GetZipcodeCities();
    }

    private void Edit()
    {
        profileService.UpdateProfile(profile);
        js.InvokeVoidAsync("alert", "Profile updated");
        StateHasChanged();
    }

    private async Task DeleteAccount()
    {
        bool confirmed = await js.InvokeAsync<bool>("confirm", "This will delete your profile and account. Continue?");

        if (!confirmed)
        {
            return;
        }
        profileService.DeleteProfile(profile);
        accountService.DeleteAccount(account);

        await js.InvokeVoidAsync("alert", "Your account has been deleted!");
        
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        navManager.NavigateTo("/", true);
    }
}
